//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC//           Version 0.90. August 3, 2009.
//LIC// 
//LIC// Copyright (C) 2006-2009 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================
//Header file for Tri/Tet linear elasticity elements
#ifndef OOMPH_TLINEAR_ELASTICITY_ELEMENTS_HEADER
#define OOMPH_TLINEAR_ELASTICITY_ELEMENTS_HEADER


// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif


//OOMPH-LIB headers
#include "../generic/nodes.h"
#include "../generic/oomph_utilities.h"
#include "../generic/Telements.h"
#include "time_harmonic_linear_elasticity_elements.h"

namespace oomph
{

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// TTimeHarmonicLinearElasticityElement
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////



//======================================================================
/// TTimeHarmonicLinearElasticityElement<DIM,NNODE_1D> elements are 
/// isoparametric triangular 
/// DIM-dimensional TimeHarmonicLinearElasticity elements with  
/// NNODE_1D nodal points along each
/// element edge. Inherits from TElement and TimeHarmonicLinearElasticityEquations
//======================================================================
template <unsigned DIM, unsigned NNODE_1D>
 class TTimeHarmonicLinearElasticityElement : public TElement<DIM,NNODE_1D>, 
 public TimeHarmonicLinearElasticityEquations<DIM>
 {
  
   public:
  
  ///\short  Constructor: Call constructors for TElement and 
  /// TimeHarmonicLinearElasticity equations
   TTimeHarmonicLinearElasticityElement() : TElement<DIM,NNODE_1D>(), 
   TimeHarmonicLinearElasticityEquations<DIM>() { }
  
  
  /// Broken copy constructor
 TTimeHarmonicLinearElasticityElement(const TTimeHarmonicLinearElasticityElement<DIM,NNODE_1D>& dummy) 
  { 
   BrokenCopy::broken_copy("TTimeHarmonicLinearElasticityElement");
  } 
 
 /// Broken assignment operator
 void operator=(const TTimeHarmonicLinearElasticityElement<DIM,NNODE_1D>&) 
  {
   BrokenCopy::broken_assign("TTimeHarmonicLinearElasticityElement");
  }
 
 /// \short Output function:  
 void output(std::ostream &outfile)
 {
  TimeHarmonicLinearElasticityEquations<DIM>::output(outfile);
  }

 ///  \short Output function:  
 void output(std::ostream &outfile, const unsigned &nplot)
  {
   TimeHarmonicLinearElasticityEquations<DIM>::output(outfile,nplot);
  }


 /// \short C-style output function:  
 void output(FILE* file_pt)
  {
   TimeHarmonicLinearElasticityEquations<DIM>::output(file_pt);
  }

 ///  \short C-style output function:  
 void output(FILE* file_pt, const unsigned &n_plot)
  {
   TimeHarmonicLinearElasticityEquations<DIM>::output(file_pt,n_plot);
  }

};

//=======================================================================
/// Face geometry for the TTimeHarmonicLinearElasticityElement elements: The spatial 
/// dimension of the face elements is one lower than that of the
/// bulk element but they have the same number of points
/// along their 1D edges.
//=======================================================================
template<unsigned DIM, unsigned NNODE_1D>
class FaceGeometry<TTimeHarmonicLinearElasticityElement<DIM,NNODE_1D> >: 
 public virtual TElement<DIM-1,NNODE_1D>
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional QElement
 FaceGeometry() : TElement<DIM-1,NNODE_1D>() {}

};

//=======================================================================
/// Face geometry for the 1D TTimeHarmonicLinearElasticityElement elements: Point elements
//=======================================================================
template<unsigned NNODE_1D>
class FaceGeometry<TTimeHarmonicLinearElasticityElement<1,NNODE_1D> >: 
 public virtual PointElement
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional TElement
 FaceGeometry() : PointElement() {}

};


}

#endif

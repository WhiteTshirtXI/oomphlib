//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC//           Version 0.90. August 3, 2009.
//LIC// 
//LIC// Copyright (C) 2006-2009 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================
#ifndef OOMPH_CIRCULAR_SHELL_MESH_HEADER
#define OOMPH_CIRCULAR_SHELL_MESH_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

// OOMPH-LIB headers
#include "../generic/mesh.h"
#include "../generic/matrices.h"
#include "../generic/quadtree.h"
#include "../generic/quad_mesh.h"
#include "rectangular_quadmesh.template.h"


namespace oomph
{

//========================================================================
/// A 2D solid mesh for (topologically) circular cylindrical shells.
/// The shell is represented by two Lagrangian coordinates that correspond
/// to z and theta in cylindrical polars. The required mesh is therefore a
/// 2D mesh and is therefore inherited from the generic RectangularQuadMesh
//=======================================================================
template <class ELEMENT>
class CircularCylindricalShellMesh : 
 public virtual RectangularQuadMesh<ELEMENT>,
 public virtual SolidMesh
{
public:

 ///Constructor for the mesh
 CircularCylindricalShellMesh(const unsigned &nx,
                              const unsigned &ny,
                              const double &lx,
                              const double &ly,
           TimeStepper* time_stepper_pt=&Mesh::Default_TimeStepper);
 
 /// \short In all elastic problems, the nodes must be assigned an undeformed,
 /// or reference, position, corresponding to the stress-free state
 /// of the elastic body. This function assigns the undeformed position
 /// for the nodes on the elastic tube
 void assign_undeformed_positions(GeomObject* const &undeformed_midplane_pt);

};


}

#endif

//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC//           Version 0.85. June 9, 2008.
//LIC// 
//LIC// Copyright (C) 2006-2008 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================
#ifndef OOMPH_DOUBLE_VECTOR_CLASS_HEADER
#define OOMPH_DOUBLE_VECTOR_CLASS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif

// c++ headers
#include <algorithm>

// oomph headers
#include "linear_algebra_distribution.h"


namespace oomph{

class CRDoubleMatrix;

//=============================================================================
/// \short A vector in the mathematical sense, initially developed for
/// linear algebra type applications.\n
/// If MPI then this vector can be distributed - its distribution is 
/// described by the LinearAlgebraDistribution object at Distribution_pt. \n
/// Data is stored in a C-style pointer vector (double*)
//=============================================================================
 class DoubleVector : public DistributableLinearAlgebraObject
{                                                        
 
 public :                     
  
  /// \short Constructor for a DoubleVector of size ZERO.
  DoubleVector()
  : Values_pt(0)
  {}
 
 /// \short Constructor. Assembles a DoubleVector with a prescribed
 /// distribution. Additionally every entry can be set (with argument v - 
 /// defaults to 0).
 DoubleVector(const LinearAlgebraDistribution* const &dist_pt, 
              const double& v = 0)
  : Values_pt(0)
  {
   this->rebuild(dist_pt,v);
  }
   
 /// Destructor - just calls this->clear() to delete the distribution and data
 ~DoubleVector()
  {
   this->clear();
  }                 
 
 /// Copy constructor
 DoubleVector(const DoubleVector& new_vector)
  : Values_pt(0)
  {
   this->rebuild(new_vector);
  }
 
 /// assignment operator
 void operator=(const DoubleVector& old_vector)
  {
   this->rebuild(old_vector);
  }
 
 /// \short Just copys the argument DoubleVector
 void rebuild(const DoubleVector& old_vector);

 /// \short Assembles a DoubleVector with distribution dist, if v is specified 
 /// each row is set to v
 void rebuild(const LinearAlgebraDistribution* const &dist_pt, 
              const double& v = 0);

 /// \short initialise the whole vector with value v
 void initialise(const double& v = 0.0);
 
 /// \short wipes the DoubleVector
 void clear() 
  {
   delete[] Values_pt;
   Values_pt = 0;
   Distribution_pt->clear();
  }
 
 /// \short The contents of the vector are redistributed to match the new
 /// distribution. In a non-MPI rebuild this method works, but does nothing. \n
 /// \b NOTE 1: The current distribution and the new distribution must have
 /// the same number of global rows.\n
 /// \b NOTE 2: The current distribution and the new distribution must have
 /// the same Communicator.
 void redistribute(LinearAlgebraDistribution& new_dist);
   
 /// \short [] access function to the (local) values of this vector
 double& operator[](int i);

 /// \short += operator
 void operator+=(DoubleVector v);

 /// -= operator
 void operator-=(DoubleVector v);

 /// \short [] access function to the (local) values of this vector
 const double operator[](int i) const;

 /// \short returns the maximum coefficient
 double max();

 /// \short access function to the underlying values (const version)
// const double* values_pt() const
//  {
//   return Values_pt;
//  }

 /// access function to the underlying values
 double* values_pt()
  {
   return Values_pt;
  }

 /// \short access function to the underlying values (const version)
 double* values_pt() const
  {
   return Values_pt;
  }

 /// \short access function to the underlying values (const version)
// const double* values_pt()
//  {
//   return Values_pt;
//  }

 /// output the contents of the vector
 void output(std::ostream &outfile);

 /// output the contents of the vector
 void output(std::string filename)
  {
    // Open file
    std::ofstream some_file;
    some_file.open(filename.c_str());
    output(some_file);
    some_file.close();
  }

 /// compute the 2 norm of this vector
 double dot(const DoubleVector& vec);

 /// compute the 2 norm of this vector 
 double norm();

 /// compute the A-norm using the matrix at matrix_pt
 double norm(CRDoubleMatrix* matrix_pt);

 private :
 
 /// the local vector
 double* Values_pt;                           
}; //end of DoubleVector                 
} // end of oomph namespace
#endif

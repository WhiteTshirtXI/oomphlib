//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC//           Version 0.90. August 3, 2009.
//LIC// 
//LIC// Copyright (C) 2006-2009 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================

//Include guards
#ifndef OOMPH_GENERAL_BLOCK_PRECONDITIONERS
#define OOMPH_GENERAL_BLOCK_PRECONDITIONERS


// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

// c++ include
#include<list>

// oomph-lib includes
#include "matrices.h"
#include "mesh.h"
#include "problem.h"
#include "block_preconditioner.h"
#include "SuperLU_preconditioner.h"
#include "preconditioner_array.h"
#include "matrix_vector_product.h"


namespace oomph
{
 
 namespace PreconditionerCreationFunctions
 {
  /// \short Helper function to create a SuperLu preconditioner (for use as
  /// the default subsididary preconditioner creator in
  /// GeneralPurposeBlockPreconditioners).
  inline Preconditioner* create_super_lu_preconditioner()
  { return new SuperLUPreconditioner; }
 }


 //============================================================================
 /// helper base class for general purpose block preconditioners
 //============================================================================
 template<typename MATRIX>
 class GeneralPurposeBlockPreconditioner : public BlockPreconditioner<MATRIX>
 {

 public:

  /// \short typedef for a function that allows other preconditioners to be
  /// employed to solve the subsidiary linear systems. \n
  /// The function should return a pointer to the required subsidiary
  /// preconditioner generated using new. This preconditioner is responsible
  /// for the destruction of the subsidiary preconditioners.
  typedef Preconditioner* (*SubsidiaryPreconditionerFctPt)();

  /// constructor
  GeneralPurposeBlockPreconditioner() 
   : BlockPreconditioner<MATRIX>(),
     Subsidiary_preconditioner_creation_function_pt
     (&PreconditionerCreationFunctions::create_super_lu_preconditioner)
  {}

  /// Destructor: clean up memory then delete all subsidiary
  /// preconditioners.
  virtual ~GeneralPurposeBlockPreconditioner()
  {
   this->clean_up_memory();

   for(unsigned j=0, nj=Subsidiary_preconditioner_pts.size(); j<nj; j++)
     {
      delete Subsidiary_preconditioner_pts[j];
     }
  }
  
  /// \short ??ds I think clean_up_memory is supposed to clear out any stuff that
  /// doesn't need to be stored between solves.
  /// Call clean up on any non-null subsidiary preconditioners.
  virtual void clean_up_memory()
   {
    // Call clean up in any subsidiary precondtioners that are set.
    for(unsigned j=0, nj=Subsidiary_preconditioner_pts.size(); j<nj; j++)
     {
      if(Subsidiary_preconditioner_pts[j] != 0)
       {
        Subsidiary_preconditioner_pts[j]->clean_up_memory();
       }
     }

    // Clean up the block preconditioner base class stuff
    this->clear_block_preconditioner_base();
   }

  /// Broken copy constructor
  GeneralPurposeBlockPreconditioner(const GeneralPurposeBlockPreconditioner&) 
  { 
   BrokenCopy::broken_copy("GeneralPurposeBlockPreconditioner");
  } 
 
  /// Broken assignment operator
  void operator=(const GeneralPurposeBlockPreconditioner&) 
  {
   BrokenCopy::broken_assign("GeneralPurposeBlockPreconditioner");
  }

  /// access function to set the subsidiary preconditioner function.
  void set_subsidiary_preconditioner_function
  (SubsidiaryPreconditionerFctPt sub_prec_fn)
  {
   Subsidiary_preconditioner_creation_function_pt = sub_prec_fn;
  }

  /// \short specify a DOF to block map
  void set_dof_to_block_map(Vector<unsigned>& dof_to_block_map)
  {
   Dof_to_block_map = dof_to_block_map;
  }
  
  /// Modified block setup for general purpose block preconditioners
  void block_setup()
  {
   if (Dof_to_block_map.size() > 0)
    {
     BlockPreconditioner<MATRIX>::block_setup(Dof_to_block_map);
    }
   else
    {
     BlockPreconditioner<MATRIX>::block_setup();
    }
  }
  
  
 protected:

  /// \short Create any subsidiary preconditioners needed. Usually
  /// nprec_needed = nblock_types, except for the ExactBlockPreconditioner
  /// which only requires one preconditioner.
  void fill_in_subsidiary_preconditioners(const unsigned &nprec_needed)
  {

   // If it's empty then fill it in with null pointers.
   if(Subsidiary_preconditioner_pts.empty())
    {
     Subsidiary_preconditioner_pts.assign(nprec_needed, 0); 
    }
   else
    {
     // Otherwise check we have the right number of them
#ifdef PARANOID
     if(Subsidiary_preconditioner_pts.size() != nprec_needed)
      {
       using namespace StringConversion;
       std::string error_msg = "Wrong number of precondtioners in";
       error_msg += "Subsidiary_preconditioner_pts, should have ";
       error_msg += to_string(nprec_needed) + " but we actually have ";
       error_msg += to_string(Subsidiary_preconditioner_pts.size());
       throw OomphLibError(error_msg, OOMPH_CURRENT_FUNCTION,
                           OOMPH_EXCEPTION_LOCATION);
      }
#endif
    }


   // Now replace any null pointers with new preconditioners
   for(unsigned j=0, nj=Subsidiary_preconditioner_pts.size(); j<nj; j++)
    {
     if(Subsidiary_preconditioner_pts[j] == 0)
      {
       Subsidiary_preconditioner_pts[j] = 
        (*Subsidiary_preconditioner_creation_function_pt)();
      }
    }

  }

  /// List of preconditioners to use for the blocks to be solved.
  Vector<Preconditioner*> Subsidiary_preconditioner_pts;

  /// Function to create any subsidiary preconditioners not set in
  /// Subsidiary_preconditioner_pts.
  SubsidiaryPreconditionerFctPt Subsidiary_preconditioner_creation_function_pt;

 private:

  /// the set of dof to block maps for this preconditioner
  Vector<unsigned> Dof_to_block_map;
 };

 

 //=============================================================================
 /// \short Block diagonal preconditioner. By default SuperLU is used to solve 
 /// the subsidiary systems, but other preconditioners can be used by setting 
 /// them using passing a pointer to a function of type 
 /// SubsidiaryPreconditionerFctPt to the method 
 /// subsidiary_preconditioner_function_pt().
 //=============================================================================
 template<typename MATRIX> 
 class BlockDiagonalPreconditioner 
  : public GeneralPurposeBlockPreconditioner<MATRIX>
 {
   
 public :
    
  /// constructor - when the preconditioner is used as a master preconditioner
  BlockDiagonalPreconditioner() : GeneralPurposeBlockPreconditioner<MATRIX>()
  {
   // by default we do not use two level parallelism
   Use_two_level_parallelisation = false;

   // null the Preconditioner array pt
   Preconditioner_array_pt = 0;

   // Don't doc by default
   Doc_time_during_preconditioner_solve=false;
  }
 
  /// Destructor - delete the preconditioner matrices
  virtual ~BlockDiagonalPreconditioner()
  {
   this->clean_up_memory();
  }

  /// clean up the memory
  virtual void clean_up_memory()
  {
   if (Use_two_level_parallelisation)
    {
     delete Preconditioner_array_pt;  
     Preconditioner_array_pt = 0;
    }

   // Clean up the base class too
   GeneralPurposeBlockPreconditioner<MATRIX>::clean_up_memory();
  }
 
  /// Broken copy constructor
  BlockDiagonalPreconditioner(const BlockDiagonalPreconditioner&) 
  { 
   BrokenCopy::broken_copy("BlockDiagonalPreconditioner");
  } 
 
  /// Broken assignment operator
  void operator=(const BlockDiagonalPreconditioner&) 
  {
   BrokenCopy::broken_assign("BlockDiagonalPreconditioner");
  }
 
  /// Apply preconditioner to r
  void preconditioner_solve(const DoubleVector &r, DoubleVector &z);
 
  /// \short Setup the preconditioner 
  virtual void setup();
   
  /// \short Use two level parallelisation 
   void enable_two_level_parallelisation() 
  {
#ifndef OOMPH_HAS_MPI
   throw OomphLibError("Cannot do any parallelism since we don't have MPI.",
                       OOMPH_CURRENT_FUNCTION, OOMPH_EXCEPTION_LOCATION);
#endif
   Use_two_level_parallelisation = true;
  }

  /// \short Don't use two-level parallelisation
  void disable_two_level_parallelisation() 
  { Use_two_level_parallelisation = false;}

  /// Enable Doc timings in application of block sub-preconditioners
  void enable_doc_time_during_preconditioner_solve()
  {Doc_time_during_preconditioner_solve=true;}

  /// Disable Doc timings in application of block sub-preconditioners
  void disable_doc_time_during_preconditioner_solve()
  {Doc_time_during_preconditioner_solve=false;}

  void fill_in_subsidiary_preconditioners(const unsigned &nblock_types)
  {
#ifdef PARANOID
   if((Use_two_level_parallelisation) && 
      !this->Subsidiary_preconditioner_pts.empty())
    {
     std::string err_msg = 
      "Two level parallelism diagonal block preconditioners cannot have";
     err_msg += " any preset preconditioners (due to weird memory management";
     err_msg += " in the PreconditionerArray, you could try fixing it).";
     throw OomphLibError(err_msg, OOMPH_CURRENT_FUNCTION,
                         OOMPH_EXCEPTION_LOCATION);
    }
#endif
   
   // Now call the real function
   GeneralPurposeBlockPreconditioner<MATRIX>::
    fill_in_subsidiary_preconditioners(nblock_types);
  }

protected:

  /// This is a helper function to allow us to implement AntiDiagonal
  /// preconditioner by only changing this function. Get the second index
  /// for block number i. Obviously for a diagonal preconditioner we want
  /// the blocks (i,i), (for anti diagonal we will want blocks (i, nblock -
  /// i), see that class).
  virtual unsigned get_other_diag_ds(const unsigned &i,
                                     const unsigned &nblock) const
  { return i; }


 private :

  /// pointer for the PreconditionerArray
  PreconditionerArray* Preconditioner_array_pt;

  /// Use two level parallelism using the PreconditionerArray
  bool Use_two_level_parallelisation;

  /// Doc timings in application of block sub-preconditioners?
  bool Doc_time_during_preconditioner_solve;
 };

 //============================================================================
 /// setup for the block diagonal preconditioner
 //============================================================================
 template<typename MATRIX> 
 void BlockDiagonalPreconditioner<MATRIX>::setup()
 {
  // clean the memory
  this->clean_up_memory();

  // Set up the block look up schemes
  GeneralPurposeBlockPreconditioner<MATRIX>::block_setup();

  // number of types of blocks.
  unsigned nblock_types = 0;
  if(this->Preconditioner_blocks_have_been_precomputed)
   {
    nblock_types = this->nblocks_precomputed();
   }
  else
   {
    nblock_types = this->nblock_types();
   }

   // Create any subsidiary preconditioners needed
   this->fill_in_subsidiary_preconditioners(nblock_types);

  // If using two level parallelisation then we need to use a
  // PrecondtionerArray which requires very different setup. ??ds possibly
  // it should have it's own class?
  if(Use_two_level_parallelisation)
   {
    // Get the blocks. We have to use new because you can't have containers
    // of matrices because the copy constructor is buggy (so we create a
    // container of pointers instead). ??ds
    Vector<CRDoubleMatrix*> block_diagonal_matrix_pts(nblock_types, 0);
    for(unsigned i=0; i<nblock_types; i++)
     {
      block_diagonal_matrix_pts[i] = new CRDoubleMatrix;
      this->get_block(i, get_other_diag_ds(i, nblock_types),
                      *block_diagonal_matrix_pts[i]);
     }

    // Construct the preconditioner array
    Preconditioner_array_pt = new PreconditionerArray;

    Preconditioner_array_pt->
     setup_preconditioners(block_diagonal_matrix_pts,
                           this->Subsidiary_preconditioner_pts,
                           this->comm_pt());

    // and delete the blocks
    for(unsigned i=0; i<nblock_types; i++)
     {
      delete block_diagonal_matrix_pts[i];
      block_diagonal_matrix_pts[i] = 0;
     }

    // Preconditioner array is weird, it calls delete on all the
    // preconditioners you give it and requires new ones each time!
    this->Subsidiary_preconditioner_pts.clear();
   }


  // Otherwise just set up each block's preconditioner in order
  else
   {
    for(unsigned i=0; i<nblock_types; i++)
     {
      // Get the block
      unsigned j = get_other_diag_ds(i, nblock_types);
      CRDoubleMatrix block = this->get_block(i, j);

      // Set up preconditioner (i.e. approximately solve the block + store solution)
      double superlusetup_start = TimingHelpers::timer();
      this->Subsidiary_preconditioner_pts[i]->setup(&block,this->comm_pt());
      double superlusetup_end = TimingHelpers::timer();
      oomph_info << "Took " << superlusetup_end - superlusetup_start
                 << "s to setup."<< std::endl;
     }
   }

 }
 
 //=============================================================================
 /// Preconditioner solve for the block diagonal preconditioner
 //=============================================================================
 template<typename MATRIX> 
 void BlockDiagonalPreconditioner<MATRIX>::
 preconditioner_solve(const DoubleVector& r, DoubleVector& z)
 {
  // Cache umber of block types
  unsigned n_block = 0;
  if(this->Preconditioner_blocks_have_been_precomputed)
   {
    n_block = this->nblocks_precomputed();
   }
  else
   {
    n_block = this->nblock_types();
   }

  // vector of vectors for each section of residual vector
  Vector<DoubleVector> block_r;
  
  // rearrange the vector r into the vector of block vectors block_r
  this->get_block_vectors(r,block_r);
  
  // if the solution vector is not setup then build it
  if (!z.built())
   {
    z.build(this->distribution_pt(),0.0);
   }

  // vector of vectors for the solution block vectors
  Vector<DoubleVector> block_z(n_block);

  if (Use_two_level_parallelisation)
   {
    Preconditioner_array_pt->solve_preconditioners(block_r, block_z);
   }
  else
   {
    // solve each diagonal block
    for (unsigned i = 0; i < n_block; i++)
     {
      double t_start=0.0;
      if (Doc_time_during_preconditioner_solve)
       {
        t_start=TimingHelpers::timer();
       }
      this->Subsidiary_preconditioner_pts[i]->preconditioner_solve(block_r[i],
                                                                   block_z[i]);
      if (Doc_time_during_preconditioner_solve)
       {
        oomph_info << "Time for application of " << i 
                   << "-th block preconditioner: " 
                   << TimingHelpers::timer()-t_start 
                   << std::endl;
       }
     }
   }

  // copy solution in block vectors block_r back to z
  this->return_block_vectors(block_z,z);
 }




 ///////////////////////////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////




 //=============================================================================
 /// \short General purpose block triangular preconditioner\n
 /// By default this is Upper triangular.\n
 /// By default SuperLUPreconditioner (or SuperLUDistPreconditioner) is used to
 /// solve the subsidiary systems, but other preconditioners can be used by 
 /// setting them using passing a pointer to a function of type 
 /// SubsidiaryPreconditionerFctPt to the method 
 /// subsidiary_preconditioner_function_pt().
 //=============================================================================
 template<typename MATRIX> 
 class BlockTriangularPreconditioner 
  : public GeneralPurposeBlockPreconditioner<MATRIX>
 {
 
 public :
 
  /// Constructor. (By default this preconditioner is upper triangular).
  BlockTriangularPreconditioner() 
   : GeneralPurposeBlockPreconditioner<MATRIX>()
  {
   // default to upper triangular
   Upper_triangular = true;
  }
 
  /// Destructor - delete the preconditioner matrices
  virtual ~BlockTriangularPreconditioner()
  {
   this->clean_up_memory();
  }

  /// clean up the memory
  virtual void clean_up_memory()
  {
   //number of block types
   unsigned n_block = this->Subsidiary_preconditioner_pts.size();
     
   //delete diagonal blocks
   for (unsigned i = 0 ; i < n_block; i++)
    {
     if (Upper_triangular)
      {
       for (unsigned j = i+1; j < n_block; j++)
        {
         delete Off_diagonal_matrix_vector_products(i,j);
         Off_diagonal_matrix_vector_products(i,j) = 0;
        }
      }
     else
      {
       for (unsigned j = 0; j < i; j++)
        {
         delete Off_diagonal_matrix_vector_products(i,j);
         Off_diagonal_matrix_vector_products(i,j) = 0;
        }
      }
    }

   // Clean up the base class too
   GeneralPurposeBlockPreconditioner<MATRIX>::clean_up_memory(); 
  }
 
  /// Broken copy constructor
  BlockTriangularPreconditioner(const BlockTriangularPreconditioner&) 
  { 
   BrokenCopy::broken_copy("BlockTriangularPreconditioner");
  } 
 
  /// Broken assignment operator
  void operator=(const BlockTriangularPreconditioner&) 
  {
   BrokenCopy::broken_assign("BlockTriangularPreconditioner");
  }
 
  /// Apply preconditioner to r
  void preconditioner_solve(const DoubleVector &r, DoubleVector &z);
 
  /// \short Setup the preconditioner 
  void setup();

  /// Use as an upper triangular preconditioner
  void upper_triangular() 
  {
   Upper_triangular = true;
  }

  /// Use as a lower triangular preconditioner
  void lower_triangular() 
  {
   Upper_triangular = false;
  }

 private:  

  /// Matrix of matrix vector product operators for the off diagonals
  DenseMatrix<MatrixVectorProduct*> Off_diagonal_matrix_vector_products;

  /// Boolean indicating upper or lower triangular
  bool Upper_triangular;
 };

 //============================================================================
 /// setup for the block triangular preconditioner
 //============================================================================
 template<typename MATRIX> 
 void BlockTriangularPreconditioner<MATRIX>::
 setup()
 {
  // clean the memory
  this->clean_up_memory();

  // Set up the block look up schemes
  this->block_setup();
   
  // number of block types
  unsigned nblock_types = 0;
  if(this->Preconditioner_blocks_have_been_precomputed)
   {
    nblock_types = this->nblocks_precomputed();
   }
  else
   {
    nblock_types = this->nblock_types();
   }

  // storage for the off diagonal matrix vector products
  Off_diagonal_matrix_vector_products.resize(nblock_types,nblock_types,0);

  // Fill in any null subsidiary preconditioners
  this->fill_in_subsidiary_preconditioners(nblock_types);

  // build the preconditioners and matrix vector products
  for (unsigned i = 0; i < nblock_types; i++)
   {
    // Get the block and set up the preconditioner.
    {
     CRDoubleMatrix block_matrix = this->get_block(i,i);
     this->Subsidiary_preconditioner_pts[i]
      ->setup(&block_matrix, this->comm_pt());
    }
     
    // next setup the off diagonal mat vec operators
    unsigned l = i+1;
    unsigned u = nblock_types;
    if (!Upper_triangular)
     {
      l = 0;
      u = i;
     }

    for (unsigned j = l; j < u; j++)
     {
      // Get the block
      CRDoubleMatrix block_matrix = this->get_block(i,j);

      // Copy the block into a "multiplier" class. If trilinos is being
      // used this should also be faster than oomph-lib's multiplys.
      Off_diagonal_matrix_vector_products(i,j) = new MatrixVectorProduct();

      // If we have a distribution (e.g. because we have precomputed
      // blocks) then we need to set it here
      if(this->Preconditioner_blocks_have_been_precomputed)
       {
        Off_diagonal_matrix_vector_products(i,j)->setup
          (&block_matrix, this->Precomputed_block_distribution_pt[j]);
       }

      // Otherwise assume uniform distribution
      else
       {
        Off_diagonal_matrix_vector_products(i,j)->setup(&block_matrix);
       }
     }
   }
 }
 
 //=============================================================================
 /// Preconditioner solve for the block triangular preconditioner
 //=============================================================================
 template<typename MATRIX> void BlockTriangularPreconditioner<MATRIX>::
 preconditioner_solve(const DoubleVector& r, DoubleVector& z)
 {
  // Cache number of block types
  unsigned n_block = 0;
  if(this->Preconditioner_blocks_have_been_precomputed)
   {
    n_block = this->nblocks_precomputed();
   }
  else
   {
    n_block = this->nblock_types();
   }

  //
  int start = n_block-1;
  int end = -1;
  int step = -1;
  if (!Upper_triangular)
   {
    start = 0;
    end = n_block;
    step = 1;
   }

  // vector of vectors for each section of residual vector
  Vector<DoubleVector> block_r;
  
  // rearrange the vector r into the vector of block vectors block_r
  this->get_block_vectors(r,block_r);

  // vector of vectors for the solution block vectors
  Vector<DoubleVector> block_z(n_block);

  //
  for (int i = start; i != end; i+=step)
   {
    // solve
    this->Subsidiary_preconditioner_pts[i]->preconditioner_solve(block_r[i],
                                                           block_z[i]);

    // substitute
    for (int j = i + step; j !=end; j+=step)
     {
      DoubleVector temp;
      Off_diagonal_matrix_vector_products(j,i)->multiply(block_z[i],temp);
      block_r[j] -= temp;
     }
   }

  // copy solution in block vectors block_r back to z
  this->return_block_vectors(block_z,z);
 }


 ///////////////////////////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////////////////////////





 //=============================================================================
 /// Exact block preconditioner - block preconditioner assembled from all blocks
 /// associated with the preconditioner and solved by SuperLU.
 //=============================================================================
 template<typename MATRIX> 
  class ExactBlockPreconditioner 
  : public GeneralPurposeBlockPreconditioner<MATRIX>
  {
 
    public :
  
   /// constructor
    ExactBlockPreconditioner() 
     : GeneralPurposeBlockPreconditioner<MATRIX>() {}
   
   /// Destructor
   virtual ~ExactBlockPreconditioner() {}
   
   /// Broken copy constructor
   ExactBlockPreconditioner(const ExactBlockPreconditioner&) 
    { 
     BrokenCopy::broken_copy("ExactBlockPreconditioner");
    } 
  
   /// Broken assignment operator
   void operator=(const ExactBlockPreconditioner&) 
    {
     BrokenCopy::broken_assign("ExactBlockPreconditioner");
    }
  
   /// Apply preconditioner to r
   void preconditioner_solve(const DoubleVector &r, DoubleVector &z);
  
   /// \short Setup the preconditioner 
   void setup();

   /// \short Access for the preconditioner pointer used to solve the
   /// system (stored in the vector of pointers in the base class);
   Preconditioner*& preconditioner_pt()
   {
    return this->Subsidiary_preconditioner_pts[0];
   }
  };

 //=============================================================================
 /// Setup for the block diagonal preconditioner
 //=============================================================================
 template<typename MATRIX> 
  void ExactBlockPreconditioner<MATRIX>::setup()
  {
   // Set up the block look up schemes
   this->block_setup();

   // get the number of DOF types
   unsigned nblock_types = this->nblock_types();

   // Build the preconditioner matrix
   CRDoubleMatrix* exact_block_matrix_pt 
    = new CRDoubleMatrix(this->preconditioner_matrix_distribution_pt());
  
   // If precomputed blocks are set, we use the precomputed blocks.
   // There is no need to delete the precomputed blocks, this should be handled
   // by the master preconditioner of THIS preconditioner.
   if(this->Preconditioner_blocks_have_been_precomputed)
    {
     CRDoubleMatrixHelpers::concatenate_without_communication
      (this->Block_distribution_pt,this->Precomputed_block_pt,
       *exact_block_matrix_pt);
    }
   else
    // Extract the blocks from the jacobian.
    {
     // Set the diagonal elements of required block to true for block diagonal
     // preconditioner
     DenseMatrix<bool> required_blocks(nblock_types, nblock_types,true);
  
     // matrix of block pt
     DenseMatrix<CRDoubleMatrix*> block_matrix_pt(nblock_types, 
                                                  nblock_types,0);
    
     // Get pointers to the blocks
     this->get_blocks(required_blocks, block_matrix_pt);
  
     CRDoubleMatrixHelpers::concatenate_without_communication
      (this->Block_distribution_pt,block_matrix_pt,*exact_block_matrix_pt);

     // need to delete the matrix of block matrices
     for (unsigned i = 0; i < nblock_types; i++)
      {
       for (unsigned j = 0; j < nblock_types; j++)
        {
         delete block_matrix_pt(i,j);
         block_matrix_pt(i,j) = 0;
        }
      }

    }

   // Setup the preconditioner.
   this->fill_in_subsidiary_preconditioners(1); // Only need one preconditioner
   preconditioner_pt()->setup(exact_block_matrix_pt, this->comm_pt());
   
   // delete the exact block preconditioner matrix
   delete exact_block_matrix_pt;
  }
 
 //=============================================================================
 /// Preconditioner solve for the block diagonal preconditioner
 //=============================================================================
 template<typename MATRIX> 
 void ExactBlockPreconditioner<MATRIX>::
 preconditioner_solve(const DoubleVector& r, DoubleVector& z)
 {
  // get  the block ordered components of the r vector for this preconditioner
  DoubleVector block_order_r;
  this->get_block_ordered_preconditioner_vector(r,block_order_r);

  // vector for solution
  DoubleVector block_order_z;

  // apply the preconditioner
  preconditioner_pt()->preconditioner_solve(block_order_r,block_order_z);

  // copy solution back to z vector
  this->return_block_ordered_preconditioner_vector(block_order_z,z);
 }


 /// \short Block "anti-diagonal" preconditioner, i.e. same as block
 /// diagonal but along the other diagonal of the matrix (top-right to
 /// bottom-left).
 template<typename MATRIX> 
 class BlockAntiDiagonalPreconditioner 
  : public BlockDiagonalPreconditioner<MATRIX>
 {
  protected:
  
  /// This is a helper function to allow us to implement AntiDiagonal
  /// preconditioner by only changing this function. Get the second index
  /// for block number i. Obviously for a diagonal preconditioner we want
  /// the blocks (i,i). For anti diagonal we will want blocks (i, nblock -
  /// i).
  unsigned get_other_diag_ds(const unsigned &i,
                             const unsigned &nblock) const
  { return nblock - i; }
 
 };



 // =================================================================
 /// Preconditioner that doesn't actually do any preconditioning, it just
 /// allows access to the Jacobian blocks. This is pretty hacky but oh well..
 // =================================================================
 template<typename MATRIX>
 class DummyBlockPreconditioner
  : public GeneralPurposeBlockPreconditioner<MATRIX>
 {

 public :

  /// Constructor
  DummyBlockPreconditioner()
   : GeneralPurposeBlockPreconditioner<MATRIX>() {}

  /// Destructor
  ~DummyBlockPreconditioner() {}

  /// Broken copy constructor
  DummyBlockPreconditioner(const DummyBlockPreconditioner&)
  {
   BrokenCopy::broken_copy("DummyBlockPreconditioner");
  }

  /// Broken assignment operator
  void operator=(const DummyBlockPreconditioner&)
  {
   BrokenCopy::broken_assign("DummyBlockPreconditioner");
  }

  /// Apply preconditioner to r (just copy r to z).
  void preconditioner_solve(const DoubleVector &r, DoubleVector &z)
  {z.build(r);}

  /// \short Setup the preconditioner
  void setup()
  {
   // Set up the block look up schemes
   this->block_setup();
  }

 };

}
#endif

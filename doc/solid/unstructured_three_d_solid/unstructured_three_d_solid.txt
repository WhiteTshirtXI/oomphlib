\mainpage Demo problem: 3D Solid Mechanics on unstructured meshes

The purpose of this tutorial is to demonstrate the solution of
3D solid mechanics problems on unstructured meshes. 

hierher See the section \ref three_d for the extension to 3D problems.
 

The problem studied here also serves as a "warm-up problem" for the
<a href="../../../interaction/unstructured_three_d_fsi/html/index.html">corresponding 
fluid-structure interaction problem </a> in which the elastic
bifurcation whose deformation is studied here conveys (and is loaded by) 
a viscous fluid.
 
 
<HR> 
<HR>

\section problem The problem (and results)
Here is an animation of the problem: An elastic, bifurcating vessel
is loaded by an internal pressure and gravity which acts in the
negative \f$x\f$-direction. The "ends" of the vessel are held in 
a fixed position. As the magnitude of the loading is
increased the vessel inflates and sags downwards. (The blue frame 
is shown to clarify the spatial orientation of the deforming vessel.) 


@I w 0.75\textwidth deform "An elastic, bifurcating vessel, loaded  by an internal pressure and transverse gravity. "


<HR>
<HR> 

\section mesh Mesh generation
We generate the unstructured tetrahedral mesh using the output from 
<A HREF="http://www.wias-berlin.de/~si ">Hang Si's</A>
open-source mesh generator 
<A HREF="http://tetgen.berlios.de/"> \c tetgen </A>.
The mesh generation is performed in a two-stage process.
First we use <A HREF="http://tetgen.berlios.de/">
\c tetgen </A> to generate the mesh "offline". Then we
process the output files generated by  
<A HREF="http://tetgen.berlios.de/"> \c tetgen </A>
to generate an unstructured \c oomph-lib mesh. 

<A HREF="http://tetgen.berlios.de/"> \c Tetgen </A>
requires the specification of the domain boundaries
via so-called facets -- planar surface patches that are bounded
by closed polygonal line segments. For simplicity, we only
consider a very simplistic bifurcation, comprising three tube segments
of approximately rectangular cross-section, which meet at a common junction.
Each of the three tube segment has four internal and four external
faces. The internal and external faces are connected by three further 
faces at the "in- and outflow" cross-sections (using a terminology 
that anticipates the mesh's use in the corresponding
<a href="../../../interaction/unstructured_three_d_fsi/html/index.html"> 
fluid-structure interaction problem</a>), resulting in a total of 27 faces. 

The faces are defined in a <code>*.poly</code> file that
specifies the position of the vertices, and identifies the 
facets via a "face list" which specifies the vertices that
bound each face. Faces that have holes (e.g. the in- and outflow
facets) require the specification of the hole's position. Finally, 
if the mesh itself has a hole (as in the current example where the 
vessel's lumen is hollow) the positon of the hole must be 
identified by specifiying the position of a single point that
is located inside the hole. The well-annotated <code>*.poly</code> file is 
located at:

<center>
<a href="../../../../demo_drivers/solid/unstructured_three_d_solid/fsi_bifurcation_solid.poly">demo_drivers/solid/unstructured_three_d_solid/fsi_bifurcation_solid.poly</a>
</center>

We refer to the <A HREF="http://tetgen.berlios.de/"> \c tetgen webpages </A>
and another <a href="../../../meshes/mesh_from_tetgen/html/index.html">
\c oomph-lib tutorial</a> for further details on how to 
create <code>*.poly</code> files.


Here is a plot of the domain specified by <a
href="../../../../demo_drivers/solid/unstructured_three_d_solid/fsi_bifurcation_solid.poly">fsi_bifurcation_solid.poly</a>.
The plot was created using \c tetview which is distributed with
<A HREF="http://tetgen.berlios.de/"> \c tetgen </A>.

@I w 0.75\textwidth tetgen_boundaries  "The domain and its bounding facets. "

<A HREF="http://tetgen.berlios.de/"> \c Tetgen </A> generates
an unstructured volumetric mesh from the information contained
in the <code>*.poly</code> file and outputs the mesh's nodes, 
elements and faces in the files
- <a href="../../../../demo_drivers/solid/unstructured_three_d_solid/fsi_bifurcation_solid.1.node">demo_drivers/solid/unstructured_three_d_solid/fsi_bifurcation_solid.1.node </a>
- <a href="../../../../demo_drivers/solid/unstructured_three_d_solid/fsi_bifurcation_solid.1.ele">demo_drivers/solid/unstructured_three_d_solid/fsi_bifurcation_solid.1.ele </a>
- <a href="../../../../demo_drivers/solid/unstructured_three_d_solid/fsi_bifurcation_solid.1.face">demo_drivers/solid/unstructured_three_d_solid/fsi_bifurcation_solid.1.face</a>
.
These files can be used as input to \c oomph-lib's \c TetgenMesh
class, using the procedure disussed in 
<a href="../../../meshes/mesh_from_tetgen/html/index.html">
another tutorial.</a>

  The figure below shows a plot of the mesh created with a volume
constraint of 0.2 (i.e. the maximum volume of each tetrahedron is
below 0.2 unit), using the command
\code
tetgen -a0.2 fsi_bifurcation_solid.poly 
\endcode

@I w 0.75\textwidth mesh_boundaries "Plot of the mesh, generated by tetgen. "
 
Note how each facet is sub-divided into a surface triangulation. The
nodes and faces located on (or adjacent to) the facets all share
the same boundary ID.

<HR>
<HR>

\section mesh_code Creating the mesh

We create the mesh by multiple inheritance from \c oomph-lib's 
\c TetgenMesh and the \c SolidMesh base class:

\dontinclude unstructured_three_d_solid.cc
\skipline start_mesh
\until {

The constructor calls the constructor of the underlying 
\c TetgenMesh (using the filenames of the <code>*.node </code>
<code>*.ele</code> and <code>*.face</code> files created
by <A HREF="http://tetgen.berlios.de/"> \c tetgen </A>,
As usual we set the nodes' Lagrangian coordinates to their current 
Eulerian positions, making the current configuration
stress-free.

\until set_lagrangian_nodal_coordinates()

Finally, we identify the elements that are located next to the 
various mesh boundaries.

\until };

<HR>
<HR>

\section namespace Problem Parameters
As usual we define the various problem parameters in a 
global namespace. We use \c oomph-lib's generalised Hookean
constitutive law as the constitutive equation using a Poisson's
ratio of 0.3. (***Recall*** that omitting the specification
of Young's modulus, \f$ E \f$, implies that the stresses are 
non-dimensionalised on \f$ E \f$ .)


\skipline start_namespace
\until Constitutive_law_pt

Next we define the gravitational body force, acting in
the negative \f$x\f$-direction,

\until }

and the pressure load \f$ {\bf t} = -P {\bf n} \f$ that acts on 
internal walls of the bifurcation.


\until end namespace

<HR>
<HR>

\section main The driver code

The driver code is straightforward. We store the command line
arguments, specify an output directory and create the problem object,
using nine-noded tetrahedral solid mechanics elements to 
discretise the principle of virtual displacements. 

\dontinclude unstructured_three_d_solid.cc
\skipline start_main
\until TPVD

We output the initial configuration and then perform a parameter
study in which we increment the gravitational body force and the pressure
loads simultaneously, causing the vessel to expand and
sag, as shown in the animation at the beginning of this tutorial.
(As usual we only perform a smaller number of steps if the
code is run in validation; this is indicated by a non-zero number
of command line arguments.) 

\until end main


<HR>
<HR>

\section class The Problem class
The \c Problem class has the usual member functions and provides
storage for the two sub-meshes -- the bulk mesh of 3D solid elements
and the meshes of 2D solid traction elements that apply the
pressure load to the internal boundaries of the bifurcation.

\dontinclude unstructured_three_d_solid.cc
\skipline start_problem
\until Solid_traction_mesh


We employ two vectors, \c Pinned_solid_boundary_id and
\c Solid_traction_boundary_id, to store the IDs of mesh boundaries
that make up the in and outflow cross-sections (where the
bifurcation is pinned), and the internal boundaries (
where
the pressure load has to be applied). (Recall that tetgen requires the domain 
boundaries to be specified as a collection of planar facets. Boundary
of interest in the computation, such as the "internal boundary of the
bifurcation", therefore tend to comprise multiple distinct mesh
boundaries.)

\until };



<HR>
<HR>

\section constructor The Problem constructor

We start by building the bulk mesh, using the files created
<A HREF="http://tetgen.berlios.de/"> \c tetgen </A>:

\skipline start_constructor
\until face_file_name);

Next we specify the IDs of the  <A HREF="http://tetgen.berlios.de/"> 
\c tetgen </A> boundaries that form part of specific domain
boundaries in our problem. Boundaries 0, 1 and 2 are
the in- and outflow faces along which the solid is pinned.
(See the specification of the boundaries in the
<a href="../../../../demo_drivers/solid/unstructured_three_d_solid/fsi_bifurcation_solid.poly">fsi_bifurcation_solid.poly</a>
and/or check the boundary enumeration using 
\c tetview as shown in the <a href="tetview">plot of the domain
boundaries</a> at the beginning of this tutorial.)


\until Pinned_solid_boundary_id[2]=2;

Similarly, boundaries 3 to 15 are the faces that define the internal
boundary of the bifurcation, i.e. the boundary along which we have
to apply the pressure load:

\until } 

Next we apply the boundary conditions by pinning the displacements
of all nodes that are located on the in- and outflow faces.

\until bc_file.close();

We complete the build of the elements by setting the pointer to the
constitutive equation and the body force

\until }


Next we create the traction elements, attaching them to the "bulk"
solid elements that are adjacent to the boundaries that constitute
the inside of the bifurcation. 

\until create_traction_elements();

Finally, we add both meshes as sub-meshes to the \c Problem, build
the global mesh, and assign the equation numbers.

\until end constructor


<HR>
<HR>

\section traction Creating the traction elements
The helper function \c create_traction_elements() does exactly what it
says: It loops over the bulk elements that are adjacent
to the inner surface of the bifurcation and attaches
\c SolidTractionElements to the appropriate faces. We store
the pointers to the newly created traction elements in 
separate meshes and pass the pointer to the load function to them.

\until end of create_traction_elements


<HR>
<HR>

\section doc Post-processing

The post-processing routine outputs the deformed domain shape
and the applied traction. In the spirit of continuing paranoia
we also document the domain boundaries; see \ref comm_ex.

\until }


<HR>
<HR>

\section comm_ex Comments and Exercises

\subsection bound Identification/assigment of mesh boundaries
This tutorial shows that the use of unstructured meshes
for solid mechanics problems is extremely straightforward. 
The only aspect that requires some care (and not just for solid
mechanics applications) is the correct identification/assigment of
domain boundaries when the mesh is generated with 
<A HREF="http://www.xfig.org/">xfig.</A> The fact that
we documented the mesh boundaries and the position of the pinned 
nodes in the driver code suggests (correctly!) that we managed to 
get both assignments (slightly) wrong when we first wrote the
driver code. The manual identification of nodes on domain
boundaries is tedious and therefore error prone and, as usual, 
it pays off to <B>be  as a paranoid as possible</B>! Ignore this 
advice at your own risk...


@I w 0.75\textwidth pinned_solid_nodes "Pinned solid nodes. " 


<HR>
<HR>

\section sources Source files for this tutorial
- The source files for this tutorial are located in the directory:\n\n
<CENTER>
<A HREF="../../../../demo_drivers/solid/unstructured_three_d_solid/">
demo_drivers/solid/unstructured_three_d_solid/
</A>
</CENTER>\n
- The driver codes are: \n\n
<CENTER>
<A HREF="../../../../demo_drivers/solid/unstructured_three_d_solid/unstructured_three_d_solid.cc">
demo_drivers/solid/unstructured_three_d_solid/unstructured_three_d_solid.cc
</A>
</CENTER>
and 
<CENTER>
<A HREF="../../../../demo_drivers/solid/unstructured_three_d_solid/unstructured_three_d_solid.cc">
demo_drivers/solid/unstructured_three_d_solid/unstructured_three_d_solid.cc
</A>
</CENTER>
.











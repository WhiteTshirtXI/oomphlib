\mainpage Linking VMTK with oomph-lib 

The <a href="http://www.vmtk.org/Main/HomePage">Vascular 
Modeling Toolkit</a> is a collection of libraries 
and tools for the 3D reconstruction, geometric analysis, mesh 
generation and surface data analysis for image-based modeling 
of blood vessels.

This tutorial demonstrates how to open your dataset in VMTK; navigate
around a 3D volume; reconstruct the 3D surface of a vascular segment from
CT or MR images; process a surface model to generate a mesh; and
how to extract the surface mesh. Finally, we demonstrate
how to use \c oomph-lib's conversion code 
\c create_fluid_and_solid_surface_mesh_from_fluid_xda_mesh
to generate fluid and solid meshes that allow the simulation of
physiological fluid-structure interaction problems in which the
(assumed constant thickness) vessel wall deforms in reponse to the fluid
traction.
 
Before starting, make sure that you have VMTK installed on your machine 
and that you have your DICOM (Digital Imaging and Communications in Medicine) 
images. Note that this tutorial describes the use of VMTK version 0.8.

For further information on VMTK, please refer to VMTK's 
<a href="http://www.vmtk.org/Main/HomePage">home page</a>.




<CENTER>
<TABLE BORDER=1, WIDTH=500px>
<TR>
<TD bgcolor="cornsilk">
\n\n
<CENTER>
<B>Ackowledgement:</B>
</CENTER>
\n\n
This tutorial and the associated driver codes were developed jointly
with Amine Massit (ENSTA, Paris).
\n\n
</TD>
</TR>
</TABLE>
</CENTER>


<CENTER>
<TABLE BORDER=1, WIDTH=500px>
<TR>
<TD bgcolor="cornsilk">
\n\n
<CENTER>
<B>Disclaimer:</B>
</CENTER>
\n\n
The generation of high-quality computational meshes from medical
images is a non-trivial task. The
<a href="http://www.vmtk.org/Main/HomePage"> Vascular Modeling
Toolkit</a>  greatly simplifies this task but
it is important to remember that (intelligent) user input is required
at various stages of the process. \n\n This tutorial does \b not provide
any guidance on this aspect. We simply demonstrate \b how to generate
meshes that can be used in \c oomph-lib - based  
physiological flow (or fluid-structure interaction) simulations.
If you smooth the vessels walls too much, you may lose essential
features; if you smooth too little, the shape of the vessel wall
may be polluted by imaging artefacts; etc. 
</TD>
</TR>
</TABLE>
</CENTER>

<hr>
<hr>

\section vmtk Using VMTK: From the MR/CT images to the fluid mesh

\subsection voi Volume of interest

VMTK is capable of reading DICOM directories (which contain the files 
with .dcm extension). You can open your dataset in VMTK and navigate around
the 3D volume with:
\code
 vmtkimagereader -f dicom -d dicom_directory --pipe vmtkimageviewer
\endcode

where \c dicom_directory is the path to the directory containing the
.dcm files.

 
@I w 0.75\textwidth scan " "


Once the viewer pops up, you can:

 - Rotate the volume by left-clicking anywhere on the render window 
(outside the image).
 - Translate the volume by middle-clicking anywhere on the render
 window (outside the image).
 - Zoom the volume by right-clicking anywhere on the render window
(outside the image).
 - Probe the image planes (coordinates and graylevel) by left-clicking
   on them.
 - Move through the image planes by middle-clicking on them.
 - Change the window-level by right-clicking on image planes.
 - Quit the viewer by pressing \c q or \c e.


You can extract a volume of interest (VOI) from a dataset with :

\code
 vmtkimagereader -f dicom -d dicom_directory --pipe \
vmtkimagevoiselector -ofile image_volume_voi.vti
\endcode

where the argument to the \c -ofile option specifies the output file name.

When the render window pops up, pressing \c i will activate the
"interactor": a yellowish cube will appear that is used to
select the VOI.

@I w 0.75\textwidth voi_cube " "

    - Translate the cube by middle-clicking on it.
    - Resize the cube by left-clicking and dragging the little spheres 
(handles) on the faces of the cube.
    - Normal interaction with the image is still active, so you 
can still navigate in the image as explained before. 

@I w 0.75\textwidth voi_cube2 " "


When satisfied with the VOI, press \c q or \c e. The new volume is
displayed in the render window. 

@I w 0.75\textwidth voi " "

You can quit by pressing \c q or \c e, or you can define another VOI 
by pressing \c i once again.


<hr>
<hr>



\subsection surface The 3D surface reconstruction of a vascular segment

VMTK is capable of generating an image based surface model from a \c vti
file (obtained using the procedure explained in the
section \ref voi above), using the Level Set method and can then
extract the surface model using a Marching Cubes algorithm.

First, enter:
\code
vmtklevelsetsegmentation -ifile image_volume_voi.vti -ofile level_sets.vti
\endcode

@I w 0.75\textwidth voi_display " "

When the VOI is displayed in a render window, press \c q or \c e to proceed.

A message will appear on your terminal:

\code
 Please choose initialization type: (0: colliding fronts; 1: fast
 marching; 2: threshold; 3: isosurface)
\endcode

This lets you choose the initialization method used to create the
model of the blood vessel. In this tutorial, we will only demonstrate
the \c colliding \c fronts method. In this method two seeds are placed on
the image. Two fronts are then propagated from the seeds (one front
from each) with their speeds proportional to the image intensity. 
The region where the two fronts cross (or collide), defines the 
"deformable model" -- the initial representation of the vessel 
volume. For further information on the other
initialization methods, please refer to VMTK's 
<a href="http://www.vmtk.org/Tutorials/ImageBasedModeling">tutorial page</a>.

Now, enter \c 0 to initialize with \c colliding \c fronts. 

A message will then appear on the terminal:
\code
 Please input lower threshold ('i' to activate image, 'n' for none):
\endcode

Wave propagation, used in the \c colliding \c fronts method, can be 
restricted to a set of intensity levels between two thresholds.
Enter the lower threshold, if you want to use
one, otherwise enter \c n. Note that if you don't know the appropriate
threshold value you can press \c i to activate the image 
and probe it, then quit 
with \c q or \c e when probing is done.

For our example there is no need for thresholds. Therefore enter \c n.

The next message is:
\code
 Please input upper threshold ('i' to activate image, 'n' for none):
\endcode

We repeat the same steps as for the lower threshhold.

Next, this message appears:
\code
 Please place two seeds (click on the image while pressing Ctrl).
\endcode

The render window is now activated. Place the two seeds, one 
at each of the two ends of a branch (the geometry of the entire ROI 
is created by "merging" the surfaces of individual branches).
Interact with the image planes to find where you want to place your 
first seed. When
satisfied, left-click on the image while pressing \c Ctrl. A red sphere
will then appear. 

@I w 0.75\textwidth seed1 " "

Repeat this procedure for the second seed.
Press \c q or \c e when done.

@I w 0.75\textwidth seed2 " "

Provided everything went OK, a translucent surface will appear in the
render window between the two seeds. This is your initial deformable
model. 

@I w 0.75\textwidth deformable_model1 " "

Press \c q or \c e to proceed. 

Next, you will be prompted with:
\code
 Accept initialization? (y/n):
\endcode

If you are not satisfied with your initialization, enter \c n to perform
it once again, otherwise enter \c y.

Now press \c q or \c e again (in fact, you should do this whenever
the system appears to be frozen and the message "Displaying" is 
shown on the terminal.). 
 
You are now prompted if you want to initialize another branch:

\code
Initialize another branch? (y/n): 
\endcode

Press \c n -- we will add the other branches later.

The following message will now appear: 

\code
Please input parameters (type return to accept current values, 'e' to
end, 'q' to quit):
 NumberOfIterations(0) [PropagationScaling(1.0) CurvatureScaling(0.0) 
AdvectionScaling(0.0)]:
\endcode

These parameters control the deformation of your Level Set:

- Number of iterations is the number of deformation steps 
  the model will perform.

- Propagation scaling is the weight you assign to model inflation.

- Curvature scaling is the weight you assign to model surface
  regularization (this will eventually make the model collapse and
  vanish if it is too large).

- Advection scaling regulates the attraction of the surface of the 
  image gradient modulus ridges.

Based on our limited experience, we recommended that propagation and curvature
should be set to \c 0.0, and advection to \c 1.0. The number of iterations 
should be set large enough for the level set not to move anymore 
(if the region is not too big, try with \c 300). We encourage you to
experiment with these parameters yourself.

Therefore, enter:
\code
 300 0 0 1
\endcode

The level set will then evolve until the maximum number of iterations is
reached. Then the render window will activate, displaying the final
model.

@I w 0.75\textwidth curvature0x0 " "

To quit the render window press \c q or \c e as usual.

You will then be asked:
\code
 Accept result? (y/n)
\endcode

If you are not satisfied with your final model, enter \c n to go back to
the level set parameter question. Otherwise, enter \c y.

Let us assume we are not satisfied, therefore enter \c n. You will
then go back to:

\code
Please input parameters (type return to accept current values, 'e' to
end, 'q' to quit):
 NumberOfIterations(0) [PropagationScaling(1.0) CurvatureScaling(0.0) 
AdvectionScaling(0.0)]:
\endcode

Try again with a bigger curvature scaling:
\code
 300 0 0.5 1
\endcode

This yields the following surface:

@I w 0.75\textwidth  curvature0x05 " "

To quit the render window press \c q or \c e as usual.

You will then be asked once again:
\code
 Accept result? (y/n)
\endcode

Assuming we are now satisfied, we enter \c y .

Next, we receive the prompt:
\code
Merge branch? (y/n)
\endcode

If you are (still) satisfied with this final model, enter \c y and this branch 
will be merged with any branches you segmented before. Otherwise,
enter \c n and this branch will be discarded. (\b Important: Since
this is our first branch we enter \c y even though no previous 
branches exist yet!)

The render window will activate, showing you the merged result. To quit 
the render window press \c q or \c e as usual.


Then you will be prompted with:
\code
Segment another branch? (y/n)
\endcode

If you want to segment another branch enter \c y, otherwise 
enter \c n.

Let's segment another branch and enter \c y. You will go back to :
\code
 Please choose initialization type: (0: colliding fronts; 1: fast
 marching; 2: threshold; 3: isosurface)
\endcode

Exactly the same procedure as described above can be used again.
Start by placing your two seeds:

@I w 0.75\textwidth seed4 " "

This yields the following deformable model:

@I w 0.75\textwidth deformable_model2 " "

Deform it as before, until you reach the final model:

@I w 0.75\textwidth curvature1x05 " "

Then when you merge the branches, we obtain this:

@I w 0.75\textwidth merge_branches " "

Continue until you have segmented all branches. In our case, we have three
branches (we are extracting the surface model of an iliac bifurcation). The
final result is:

@I w 0.75\textwidth merge_branches2 " "


Now you have a file named \c level_sets.vti which contains an image. 
The zero level of this image is the surface you generated. Now we  
extract a polygonal surface from it with :
\code
 vmtkmarchingcubes -ifile level_sets.vti -ofile model.vtp
\endcode

The final surface model is \c model.vtp which you can display with :
\code
vmtksurfacereader -ifile model.vtp --pipe vmtksurfaceviewer
\endcode

@I w 0.75\textwidth surfaceviewer1 " "

@I w 0.75\textwidth surfaceviewer2 " "


We note that you can add further branches to the
\c level_sets.vti file by using the command

\code
 vmtklevelsetsegmentation -ifile image_volume_voi.vti -levelsetsfile \
level_sets.vti -ofile level_sets2.vti
\endcode

<hr>
<hr>

\subsection smooth Smoothing the surface


At this point, we have our surface model and we want to generate a 
computational mesh. In most cases, the surface model has bumpy
surfaces, especially if the image quality is not high and if we didn't
use the curvature term in the level set evolution. Artificial
bumps in the surface can result in spurious flow features and will affect
the wall shear stress distribution, so one may want to increase surface
smoothness before building the mesh.

You can do this in VMTK with :
\code
 vmtksurfacesmoothing -ifile model.vtp -passband 0.1 -iterations 30 \
-ofile model_sm.vtp
\endcode

There are two parameters controlling the amount of smoothing:
passband, which is the cut-off spatial frequency of the low pass
filter, and iterations, which is the number of smoothing passes. 

For typical vessels, a passband of 0.1 and a number of iteration of 30
should be OK. For example, for the surface model obtained in the
section \ref surface above, the resulting surface is:

@I w 0.75\textwidth smooth0130 " "

Remember that we can display the surfaces with :
\code
vmtksurfacereader -ifile model_sm.vtp --pipe vmtksurfaceviewer
\endcode

Smoothing with a passband of 0.01 turns this into:

@I w 0.75\textwidth smooth00130 " "

If you want more smoothing, you can increase the passband and/or the
number of iterations, but be careful not to remove all surface features 
by smoothing too much. Also, watch the apex of bifurcations since
its curvature may decrease resulting in a shallower apex, affecting 
the simulated haemodynamics. For example, with a passband of \c 0.001 and
a number of iterations of \c 100, the result is:

@I w 0.75\textwidth smooth0001100 " "

<hr>
<hr>

\subsection clip Clipping the endcaps

Once we have created our smooth model, the next step is to open the
inlets and outlets, as they are normally closed with a blobby
appearance. We proceed by clipping the blobby endcaps with:

\code
vmtksurfaceclipper -ifile model_sm.vtp -ofile model_cl.vtp
\endcode

When the render window pops up, pressing \c i will activate the
"interactor". A cube will appear (as in \c vmtkimagevoiselector in the
section \ref voi). Position the cube in such a way that the portion 
of the surface you want to clip lies inside the cube.

@I w 0.75\textwidth clip0 " "

Press the space bar to proceed with clipping.

@I w 0.75\textwidth clip1 " "

Press i again if you want to clip another piece, or q if you want to
quit.

The final result should look like this:
 

@I w 0.75\textwidth clip2 " "

Note that it is possible to clip the endcaps automatically with
VMTK. For more information, please refer to VMTK's own
<a href="http://www.vmtk.org/Tutorials/SurfaceToMesh">tutorial pages</a>.


<hr>
<hr>

\subsection add_extensions Adding flow extensions

VMTK provides the option to generate cylindrical extensions to the
inlet and outlet cross-sections. These are typically used to
ensure that in the numerical simulation, the boundary conditions 
are applied at a reasonable distance from the region of interest
and do not have a strong effect on the flow field. Exactly what sort
of boundary conditions to apply and where to apply them is, of course,
a non-trivial problem. Nonetheless, the appropriate
VMTK command to add the cylindrical extensions is:

\code
vmtksurfacereader -ifile model_cl.vtp --pipe vmtkcenterlines \
-seedselector openprofiles --pipe vmtkflowextensions -adaptivelength 1 \
-extensionratio 8 -normalestimationratio 1 -interactive 0 --pipe \
vmtksurfacewriter -ofile model_ex.vtp
\endcode

where the control parameters are:

- \c adaptivelength (here set to 1) is a boolean flag. If set
  to 1, the length of each flow extension is made proportional to the mean 
  radius of the vessel

- \c extensionratio (here set to 8) is the proportionality factor of
the length of each flow extension. 

- \c normalestimationratio: We suggest setting this parameter to 1. For further
  information, please refer to VMTK's 
  <a href="http://www.vmtk.org/Tutorials/SurfaceToMesh">tutorial page</a>.

- The flag \c -interactive was set to \c 0: This means that
  \c vmtkflowextensions will not prompt the user about what inlet or outlet 
  to extend, but it will perform the task on all the available open
  boundaries. If you use  \c -interactive \c 1, VMTK prompts the user 
  to specify which boundaries to extend through a graphical window.

When the render window pops up, before pressing \c q, make sure you note
the different ids of the inlets and outlets. For our example, we see
in the figure below that we have one inlet with an id 0 and two
outlets with the ids 1 and 2.

@I w 0.75\textwidth extension1 " "


A message will appear on your terminal:
\code
Please input list of inlet profile ids:
\endcode

Enter the list of ids with a space between them. In our example enter
\c 0 . Next you will receive:
\code
Please input list of outlet profile ids:
\endcode

Enter the list of ids with a space separating them. In our
example enter:
\code
1 2
\endcode

You can display the resulting surface using:
\code
vmtksurfacereader -ifile model_ex.vtp --pipe vmtksurfaceviewer
\endcode

The result is:

@I w 0.75\textwidth extenstion_display " "


<hr>
<hr>

\subsection vmtk_mesh The mesh generation

Finally, we can generate our mesh using the command line:
\code
vmtkmeshgenerator -ifile model_ex.vtp -ofile mesh.vtu -edgelength 0.5
\endcode

where the edgelength parameter expresses the nominal edge length of a 
surface triangle, in physical units. Note that the surface remeshing
may fail if you specify a large edge length.


<hr>
<hr>
\section  oomph_mesh Creating an oomph-lib mesh based on output files generated by VMTK

VMTK exports the mesh for different solvers. The one we chose is the
".xda" format (of <a href="http://libmesh.sourceforge.net/">LibMesh</a>). 
To export the mesh in this format enter:

\code
 vmtkmeshwriter -ifile mesh.vtu -entityidsarray CellEntityIds -ofile \
iliac.xda
\endcode

\c oomph-lib provides a conversion code 
\code 
bin/create_fluid_and_solid_surface_mesh_from_fluid_xda_mesh
\endcode

which uses the VMTK output mesh in "*.xda" format to generate a file 
"fluid_*.poly" that can be used to generate the fluid mesh 
using the open-source mesh generator 
<a href="http://tetgen.berlios.de/">TetGen</a>.

When executing the conversion code you will be prompted with:
\code 
Please enter the file name without the file extension '.xda':
\endcode

In our example, enter \c iliac .

To facilitate the simulatation of physiological fluid-structure 
interaction problems in which the vessel walls deform elastically 
in response to the fluid traction, the conversion 
code also generates a file "solid_*.poly" that can be used to 
to generate a mesh for the 3D vessel wall which is assumed to be of
constant thickness.

The conversion code therefore requests the wall thickness:

\code 
Please enter the (uniform) wall thickness: 
\endcode


As explained in 
<a href="../..//unstructured_three_d_fsi/html/index.html">another
tutorial</a>, the consistent generation of surface coordinates in FSI problems
requires that all faces with the same boundary ID should be co-planar. 
For this reason the conversion code provides the option to assign a distinct
boundary ID to each surface triangle on the fluid-structure
interaction boundary and ensures the IDs are consistent for the fluid and the
solid meshes. (The "*.poly" files generated by the conversion code list
the relation between the old and boundary IDs at the end.)

\code 
Do you want to generate for each planar face its own ID?
Enter y or n: 
\endcode

For single-physics problem, however, it is much easier to assign a
single boundary ID to each "physical" surface (<em> i.e. </em> 
inlet, outlet, vessel boundary). Assuming that we are solving such a
single-physics problem we enter \c n. 
Two files are now generated : \c fluid_iliac.poly 
which contains the fluid domain and \c solid_iliac.poly containing the 
solid one.

<a href="http://tetgen.berlios.de/tetview.html">Tetgen's</a> 
mesh viewer \c tetview can now be used to 
display the surface meshes: 
\code 
tetview fluid_iliac.poly
\endcode  
displays the fluid surface mesh with its four boundaries 

@I w 0.75\textwidth fluid1 " "
@I w 0.75\textwidth fluid2 " "

While
\code 
tetview fluid_iliac.poly
\endcode  
displays the solid surface mesh (for a wall thickness of 2mm):

@I w 0.75\textwidth solid1 " "
@I w 0.75\textwidth solid2 " "

<hr>

If multiple boundary IDs are requested, the surface meshes
are:

@I w 0.75\textwidth fluid_mult_ids "The fluid surface with multiple boundary IDs "

@I w 0.75\textwidth solid_mult_ids "The solid surface with multiple boundary IDs for a wall thickness of 2mm "


<HR>
<HR>


\section comm_and_ex Comments and Exercises

- In its current form, the conversion code 
  \n\n
  <CENTER>
  <a href="../../../../demo_drivers/meshing/mesh_from_vmtk/create_fluid_and_solid_surface_mesh_from_fluid_xda_mesh.cc">create_fluid_and_solid_surface_mesh_from_fluid_xda_mesh.cc</a>
  </CENTER>
  \n\n
  is restricted to bifurcation-like geometries, and makes certain 
  assumptions about the enumeration of the boundaries. It should 
  be easy to modify for other geometries, however. 
  <a href="../../../contact/html/index.html">Get in touch</a> if you 
  need help with this (and feel free to share any improvements
  with us).
  \n\n
- We provide three separate tutorials to demonstrate the use of
  VMTK-based meshes in \c oomph-lib driver codes:
  \n\n
  - <a href="../../../solid/vmtk_solid/html/index.html">The inflation
    of the arterial bifurcation by a constant pressure -- a pure solid
    mechanics problem.</a>
    \n\n
  - <a href="../../../navier_stokes/vmtk_fluid/html/index.html">Steady
    finite-Reynolds number flow through the (rigid) arterial bifurcation --
    a pure fluid-mechanics mechanics problem.</a>
    \n\n
  - <a href="../../../interaction/vmtk_fsi/html/index.html">Steady 
    finite-Reynolds-number flow through an elastic
    arterial bifurcation -- a fluid-structrure interaction
    problem.</a>
  .
.

@@END@@

<hr>
<hr>
\section fluid Flow through a rigid vessel generated by VMTK
The aim of this problem is to model a flow through the 3D rigid iliac 
we obtained in the previous sections using VMTK. The flow is driven by 
a prescribed pressure drop between the upstream and the two downstream 
ends and we impose parallel in- and outflow in the inlet and outlet
cross-sections. The problem is the same as in an <a href="http://www.maths.manchester.ac.uk/%7Emheil/version_tmp_doc_for_novak/doc/navier_stokes/unstructured_three_d_fluid/html/index.html">other
tutorial</a>. We will discuss here only the changes we made to the
orginal driver code located in :
<CENTER>
<A HREF="../../../demo_drivers/navier_stokes/unstructured_three_d_fluid/">
demo_drivers/navier_stokes/unstructured_three_d_fluid/
</A>
</CENTER>

\subsection fluid_result Results

The plot shown below illustrates the velocity vectors for a Reynolds 
number of \f$ Re = 100 \f$ and a pressure drop 
\f$ \Delta P^* = P^*_{in} - P^*_{out}=1. \f$ 

@I w 0.75\textwidth fluid "Flow through an iliac driven by a prescribed pressure drop of 1 with a Reynolds number of 100 "


<HR>
<HR>

\subsection fluid_code The fluid problem code

The existing member fonction of the Problem class in the old code   
\c create_fluid_traction_elements() 
attaches \c NavierStokesTractionElements to some faces in order to
impose a pressure. In the new driver code we use
the elements \c ImposeParallelOutflowElement that impose parallel outflow
and also impose a pressure.

Therefor, we replace the exisiting member function of the Problem class:
\code 
private:
 /// Create fluid traction elements at inflow
 void create_fluid_traction_elements();
\endcode

with :
\dontinclude unstructured_three_d_fluid.cc
\skipline  /// Create fluid lagrange elements.
\until ;

We rename the Vector of FaceElement meshes, so we replace: 
\code
private:
 /// Meshes of fluid traction elements that apply pressure at in/outflow
 Vector<Mesh*> Fluid_traction_mesh_pt;
\endcode

with:

\dontinclude unstructured_three_d_fluid.cc
\skipline Meshes of FaceElements imposing parallel outflow
\until ;



We need to create the new elements in the Problem class:

\dontinclude unstructured_three_d_fluid.cc
\skipline // Create meshes of lagrange elements at inflow/outflow
\until  // end of creating lagrange elements

instead of :
\code
// Create meshes of fluid traction elements at inflow/outflow
 //-----------------------------------------------------------
 
 // Create the meshes
 unsigned n=nfluid_traction_boundary();
.
.
.
 create_fluid_traction_elements();
\endcode


and of course replace :
\code 
template<class ELEMENT>
void UnstructuredFluidProblem<ELEMENT>::create_fluid_traction_elements()
{
.
.
.
}
\endcode
 with :

(Note that In \c oomph-lib we assign to each FaceElement an
 ID. Here \c PARALL_FLOW_ID is a macro of an unsigned refering to this 
FaceElement's ID. Note that we don't have to use the FaceElement's IDs in
this example. For further information please on the FaceElement'IDs
please refer to section \ref face_id.)

\dontinclude unstructured_three_d_fluid.cc
\skipline //============start_of_fluid_lagrange_elements
\until  // end of create_parall_outflow_lagrange_elements


The next step is changing the inflow/outflow boundary Ids stored in the
vectors \c Inflow_boundary_id and \c Outflow_boundary_id .

In this demo problem, we don't need to assign to each planar face its
own ID, so if you are using the original VMTK boundary IDs, you should
have :
\code
 // Fluid mesh inflow boundaries
 Inflow_boundary_id.resize(1);
 Inflow_boundary_id[0]=1;

 
 // Fluid mesh outflow boundaries
 Outflow_boundary_id.resize(2);
 Outflow_boundary_id[0]=2;
 Outflow_boundary_id[1]=3;
\endcode

But if you chose in  
\c bin/create_fluid_and_solid_surface_mesh_from_fluid_xda_mesh 
the multiple Boundary IDs option, you should have:
\code
// Fluid mesh inflow boundaries
 Inflow_boundary_id.resize(22);
 for(unsigned i=0; i<22; i++)
  {
   Inflow_boundary_id[i]=215+i;
  }
 
 // Fluid mesh outflow boundaries
 Outflow_boundary_id.resize(11);
 for(unsigned i=0; i<11; i++)
  {
   Outflow_boundary_id[i]=237+i;
  }
\endcode


Finnaly, we have to pinn the Lagrange multipliers added by 
\c ImposeParallelOutflowElements in nodes where we impose Dirichlet
type conditions on the velocity. So we replace:
\code
 // Loop over all fluid mesh boundaries and pin velocities
 // of nodes that haven't been dealt with yet
 unsigned nbound=Fluid_mesh_pt->nboundary();
 for(unsigned b=0;b<nbound;b++)
  {
  .
  .
  .
  } // done no slip elsewhere 
\endcode

with :
\dontinclude unstructured_three_d_fluid.cc
\skipline // Apply BCs
\until // end of BC


As we impose parallel outflow using ImposeParallelOutflowElements, we
should delete the code below from the existing one:
\code
// Map to indicate which boundary has been done
 std::map<unsigned,bool> done; 
  
 // Loop over inflow/outflow boundaries to impose parallel flow
 for (unsigned in_out=0;in_out<2;in_out++)
  {
   .
   .
   .
  } // done in and outflow
 \endcode




<hr>
<hr>
\subsection source_fluid Source files
 The driver code is in: \n\n
<CENTER>
<A HREF="../../../private/user_drivers/amine/unstructured_three_d_fluid.cc">
/private/user_drivers/amine/
</A>
</CENTER>
<hr>
<hr>

\section  solid Large deformations of an elastic vessel tube loaded by an internal pressure

The aim of this problem is to model the deformation of the 3D elastic
iliac we obtained in the previous sections using VMTK, loaded by an 
internal pressure. The problem is the same as in an  
<a href="http://www.maths.manchester.ac.uk/%7Emheil/version_tmp_doc_for_novak/doc/solid/unstructured_three_d_solid/html/index.html">other
tutorial</a>. The only changes we made are in the boundary IDs. The
orginal driver code is located in :
<CENTER>
<A HREF="../../../demo_drivers/solid/unstructured_three_d_solid/">
demo_drivers/solid/unstructured_three_d_solid/
</A>
</CENTER>

<hr>
<hr>

\subsection solid_result Results
Here is an animation of the problem: An elastic Iliac vessel is
loaded by an internal pressure. The "ends" of the vessel are held in a fixed
position. As the magnitude of the loading is increased the vessel
inflates and sags downwards.

@I w 0.75\textwidth unstructured_solid " "


<hr>
<hr>
\subsection source_solid Source files
The driver code is: \n\n
<CENTER>
<A HREF="../../../private/user_drivers/amine/unstructured_three_d_solid.cc">
/private/user_drivers/amine/
</A>
</CENTER>
<hr>
<hr>

\section fsi Fluid-Solid interaction problem
This problem combines the two single-physics problems above: 
An applied pressure drop drives fluid through The elastic 3D iliac. 
We solve this
problem as a fully-coupled fluid-structure interaction problem in
which the fluid provides the traction onto the solid whose deformation
changes the fluid domain. 
The problem is the same as in an <a href="http://www.maths.manchester.ac.uk/%7Emheil/version_tmp_doc_for_novak/doc/interaction/unstructured_three_d_fsi/html/index.html">other
tutorial</a>. We will discuss here only the changes we made to the
orginal driver code located in :
<CENTER>
<A HREF="../../../demo_drivers/interaction/unstructured_three_d_fsi/">
demo_drivers/interaction/unstructured_three_d_fsi/
</A>
</CENTER>



<hr>
<hr>

\subsection fsi_result Results
The animation below illustrates the system's behaviour in a parameter
study in which we keep the Reynolds number fixed at $ Re=50 $ while 
increasing the FSI parameter $ Q $ in small increments. The increase 
in $ Q $ may be interpreted as a reduction in the tube's stiffness and 
the animation shows clearly how this increases its flow-induced
deformation: The upstream end bulges out while the downstream end is 
compressed.

@I w 0.75\textwidth unstructured_fsi_fluid_recto "Animation of the flow field (pressure contours and velocity vectors)."

@I w 0.75\textwidth unstructured_fsi_fluid_verso "Animation of the flow field (pressure contours and velocity vectors)."

@I w 0.75\textwidth unstructured_fsi_solid "Animation of the wall deformation -- the vectors indicate the fluid load."


<HR>
<HR>

\subsection face_id FaceElement'IDs

When we had one \c FaceElement adding lagrange multiplier
unknowns (and therefore resizing the Vector storing the unknown values
in the nodes), we knew how to access the lagrange multipliers as they
were the last values stored in the Vector of unknowns. But in this
problem we are using two \c FaceElements, one to impose the 
pressure and parallel outflow ( \c ImposeParallelOutflowElement) as in
the problem \ref fluid, 
the other ones to deform the fluid domain 
(\c ImposeDisplacementByLagrangeMultiplierElement). To solve this, we
assign to each FaceElement using Lagrange multipliers an ID, and we
use the member function 
\c BoundaryNodeBase::first_face_element_value_pt() that returns a
pointer to a map, which indexed by the face element identifier gives
the position of the first Lagrange multiplier value in the
Vector of unknowns stored in the Nodes.


<HR>
<HR>

\subsection fsi_code The code
As in the fluid problem, in the section \ref fluid above, we no longer
apply pressure in the inlet and outlet cross-sections using 
\c create_fluid_traction_elements(). So we replace
it with \c  create_parall_outflow_lagrange_elements() as in the section \ref
fluid_code .

We also change the inflow and outflow boundary Ids assignement. Note
that in this problem, we need to assign to each planar face each
own ID. You can find the boundary IDs informations at the end of the 
".poly" files obtained in the section \ref oomph_mesh. For example, in our
fluid_iliac.poly file we have :

\code
The new boundary ids are as follow:

 Boundary 1 : from boundary id 0 until boudary id 214
 Boundary 2 : from boundary id 215 until boudary id 236
 Boundary 3 : from boundary id 237 until boudary id 241
 Boundary 4 : from boundary id 242 until boudary id 247
\endcode

So the new boundary assignements in the driver code is:
\code
// Fluid mesh inflow boundaries
 Inflow_boundary_id.resize(22);
 for(unsigned i=0; i<22; i++)
  {
   Inflow_boundary_id[i]=215+i;
  }
 
 // Fluid mesh outflow boundaries
 Outflow_boundary_id.resize(11);
 for(unsigned i=0; i<11; i++)
  {
   Outflow_boundary_id[i]=237+i;
  }

 // The FSI boundaries :
 Fluid_fsi_boundary_id.resize(215);
 for(unsigned i=0; i<215; i++)
  {
   Fluid_fsi_boundary_id[i]=i;
  }
\endcode

In solid_iliac.poly file we have :
\code
The new boundary ids are as follow:

 the inner contour : from boundary id 0 until boudary id 214
 the front inflow face : from boundary id 215 until boudary id 234
 the left bifurication face : from boundary id 235 until boudary id 244
 the right bifurication : from boundary id 245 until boudary id 256
 the outer contour : from boundary id 257 until boudary id 471
\endcode

So in the new driver code we have:
\code
 /// IDs of solid mesh boundaries where displacements are pinned
 Pinned_solid_boundary_id.resize(42);
 for(unsigned i=0; i<42; i++)
  {
   Pinned_solid_boundary_id[i]=215+i;
  }

  // The solid and fluid fsi boundaries are numbered int he same way.

 Solid_fsi_boundary_id.resize(215);
 for(unsigned i=0; i<215; i++)
  {
   Solid_fsi_boundary_id[i]=i;
  }
\endcode

In this new code, we are using two \c FaceElements : 
\c ImposeParallelOutflowElement and 
\c ImposeDisplacementByLagrangeMultiplierElement. Therefore, we have
to assign to each \c FaceElement its own boundary ID as explained in
\ref face_id (we
created two different unsigned macros for the FaceElement IDs: 
PARALL_FLOW_ID and LAGRANGE_DISP_ID) so we need to change the constructor of
ImposeDisplacementByLagrangeMultiplierElement with: 

\code
      // Create new element
      ImposeDisplacementByLagrangeMultiplierElement<FLUID_ELEMENT>* el_pt =
      new  ImposeDisplacementByLagrangeMultiplierElement<FLUID_ELEMENT>(
       bulk_elem_pt,face_index, LAGRANGE_DISP_ID);  
\endcode

Next, we change the pinning code for the fluid mesh changes: We now access the
Lagrange multiplier values by the member function 
\c BoundaryNodeBase::first_face_element_value_pt() .We should also pin the
new Lagrange mutlipliers added by the elements 
\c ImposeParallelOutflowElement in nodes where we impose Dirichlet
type conditions on the velocity. 
Note that the pinning process in the solid mesh remains the same, we
only need to replace the boundary conditions in the fluid mesh with:

\dontinclude unstructured_three_d_fsi.cc
\skipline // Apply BCs for fluid and Lagrange elements
\until // end of BC for fluid mesh

<hr>
<hr>
\subsection source_fsi Source files
The driver code is: \n\n
<CENTER>
<A HREF="../../../private/user_drivers/amine/unstructured_three_d_fsi.cc">
/private/user_drivers/amine/
</A>
</CENTER>

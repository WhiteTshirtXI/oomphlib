\mainpage Demo problem: Fluid Mechanics on unstructured 3D meshes

This tutorial provides another demonstration of how to use
3D unstructured meshes for the solution of fluid flow problems.
(The original <a href="../../../meshes/mesh_from_tetgen/html/index.html">
tetgen tutorial</a> already contains a 3D unstructured fluid example.)

The specific problem considered here serves as a "warm-up problem" for the
<a href="../../../interaction/unstructured_three_d_fsi/html/index.html">
corresponding fluid-structure interaction problem</a> in which the
domain boundary is replaced by an elastic vessel.
 

<HR>
<HR>

\section problem The problem 
Here is a sketch of the problem: Flow is driven through a 3D rigid vessel
made of three approximately rectangular tubes that meet at a 
common junction. The flow is driven by a prescribed pressure
drop between the upstream and the two downstream ends, \f$ \Delta p^* = 
P^*_{in} - P^*_{out}, \f$ and we assume/impose parallel in and outflow
in the inlet and outlet cross-sections which are parallel to 
\f$ x-y \f$ coordinate plane. 

@I w 0.75\textwidth problem_sketch "Sketch of the problem. "
 

<HR>
<HR> 


\section mesh 3D unstructured mesh generation
We generate the unstructured tetrahedral mesh using the output from 
<A HREF="http://www.wias-berlin.de/~si ">Hang Si's</A>
open-source mesh generator 
<A HREF="http://tetgen.berlios.de/"> \c tetgen </A>.
The mesh generation is thus performed in a two-stage process.
First we use <A HREF="http://tetgen.berlios.de/">
\c tetgen </A> to generate the mesh "offline". Then we
process the output files generated by  
<A HREF="http://tetgen.berlios.de/"> \c tetgen </A>
to generate an unstructured \c oomph-lib mesh. 

<A HREF="http://tetgen.berlios.de/"> \c Tetgen </A>
requires the specification of the domain boundaries
via so-called facets -- planar surface patches that are bounded
by closed polygonal line segments. In our simple geometry
each of the three tube segments has four external
faces. Together with the three in- and outflow sections
this results in a total of 15 facets.


The 15 facets are defined in a <code>*.poly</code> file that
specifies the position of the vertices, and identifies the 
facets via a "face list" that establishes their bounding vertices. 
The well-annotated <code>*.poly</code> file for this problem 
is located at:

<center>
<a href="../../../../demo_drivers/navier_stokes/unstructured_three_d_fluid/fsi_bifurcation_fluid.poly">demo_drivers/navier_stokes/unstructured_three_d_fluid/fsi_bifurcation_fluid.poly</a>
</center>

We refer to the <A HREF="http://tetgen.berlios.de/"> \c tetgen webpages </A>
and another <a href="../../../meshes/mesh_from_tetgen/html/index.html">
\c oomph-lib tutorial</a> for further details on how to 
create <code>*.poly</code> files.


Here is a plot of the domain specified by <a
href="../../../../demo_drivers/navier_stokes/unstructured_three_d_fluid/fsi_bifurcation_fluid.poly">fsi_bifurcation_fluid.poly</a>.
The plot was created using \c tetview which is distributed with
<A HREF="http://tetgen.berlios.de/"> \c tetgen </A>.

@I w 0.75\textwidth tetgen_boundaries  "The domain and its bounding facets. "

<A HREF="http://tetgen.berlios.de/"> \c Tetgen </A> generates
an unstructured volumetric mesh from the information contained
in the <code>*.poly</code> file and outputs the mesh's nodes, 
elements and faces in the files
- <a href="../../../../demo_drivers/navier_stokes/unstructured_three_d_fluid/fsi_bifurcation_fluid.1.node">demo_drivers/navier_stokes/unstructured_three_d_fluid/fsi_bifurcation_fluid.1.node</a>
- <a href="../../../../demo_drivers/navier_stokes/unstructured_three_d_fluid/fsi_bifurcation_fluid.1.ele">demo_drivers/navier_stokes/unstructured_three_d_fluid/fsi_bifurcation_fluid.1.ele</a>
- <a
href="../../../../demo_drivers/navier_stokes/unstructured_three_d_fluid/fsi_bifurcation_fluid.1.face">demo_drivers/navier_stokes/unstructured_three_d_fluid/fsi_bifurcation_fluid.1.face</a>
.
These files can be used as input to \c oomph-lib's \c TetgenMesh
class, using the procedure disussed in 
<a href="../../../meshes/mesh_from_tetgen/html/index.html">
another tutorial.</a>
   
  The figure below shows a \c tetview plot of the mesh, created with a volume
constraint of 0.2 (i.e. the maximum volume of each tetrahedron is
guaranteed to be less than 0.2 units), using the command
\code
tetgen -a0.2 fsi_bifurcation_fluid.poly 
\endcode
 
@I w 0.75\textwidth mesh_boundaries "Plot of the mesh, generated by tetgen. "
 
Note how <A HREF="http://tetgen.berlios.de/"> \c tetgen </A>
has subdivided each of the 15 original facets specified in the 
<code>*.poly</code> file into a surface triangulation. The 
nodes and tetrahedral elements that are located on (or adjacent to) the
15 original facets inherit their boundary IDs.

<HR>
<HR>



\section results Results
The animation shown below illustrates the flow field (streamribbons 
coloured by pressure contours) for a Reynolds number of \f$ Re = ***. \f$
The transparent faces show the boundaries of the fluid elements and
illustrate that the mesh is very coarse. As a result, the flow is 
clearly under-resolved, particularly near the two outflow 
cross-sections where the imposition of parallel outflow forces
the fluid velocity to re-adjust rapidly as it approaches the outlet.
(See \ref comm_ex for a more detailed discussion of this aspect.)

@I w 0.75\textwidth flow_with_stream_ribbons "Flowfield (streamribbons, coloured by the pressure contours) and element boundaries.  "


<HR>
<HR>

\section namespace Problem Parameters
As usual we define the various problem parameters in a 
global namespace. We define the Reynolds number and 
specify the traction to be applied at the in and outlet 
cross-sections:

\dontinclude unstructured_three_d_fluid.cc
\skipline start_namespace
\until end namespace

<HR>
<HR>

\section main The driver code

We specify an output directory, create the \c Problem object 
using ten-node tetrahedralTaylor Hood elements, and output the
initial guess for the flow field:


\skipline start_main
\until doc_info.number()++;

Next we perform a parameter study in which we increase the applied
pressure drop across the domain by increasing \f$ P_{in}\f$ and
lowering \f$ P_{out}.\f$ (As usual we perform a smaller number
of steps in a validation run -- performed when the code is run
with nonzero number of command-line arguments.) 


\until end_of_main


<HR>
<HR>

\section class The Problem class
The \c Problem class has the usual member functions and provides
explicit storage for the fluid mesh and the meshes that contain
the \c FaceElements that apply the traction conditions at
in- and outlet boundaries. We also provide storage for the
IDs of the mesh boundaries that constitute the in- and outlet
boundaries to facilitate the application of boundary conditions.


\dontinclude unstructured_three_d_fluid.cc
\skipline start_problem_class
\until };



<HR>
<HR>

\section constructor The Problem constructor

We start by building the fluid mesh, using the files created
by <A HREF="http://tetgen.berlios.de/"> \c tetgen </A>:

\skipline start_constructor
\until split_corner_elements);

(See \ref comm_ex for a discussion of the \c split_corner_elements
flag). 

 
Next, we set up the boundary lookup schemes which determine which elements
are located next to which domain boundaries and specify the 
IDs of the mesh boundaries that coincide with the in- and outflow
cross-sections. Note that this information must correspond to the
specication of the boundary IDs in the tetgen <code>*.poly</code>
file. 

\until Outflow_boundary_id[1]=2;


we apply the boundary conditions for the fluid and the 
pseudo-solid equations. We pin the pseudo-solid nodes along
all domain boundaries, apply a no-slip condition for the fluid velocity 
along the solid boundary  (boundary 0), pin the velocity at the inflow
(boundary 1, where we will impose a Poiseuille flow profile), and impose
parallel outflow at the downstream end (boundary 2). 
Given that the manual identification of
mesh boundaries in unstructured meshes that are generated by
third-party mesh generators is a relatively error-prone process, we
document the boundary conditions in three separate files to allow 
an external sanity check; see
<a href="../../../solid/unstructured_solid/html/index.html#comm_ex">
the comments in the corresponding solid mechanics tutorial.</a>
The \ref comm_ex section of the present tutorial also has a sub-section 
that illustrates what can go wrong. 

\until solid_bc_file.close();

We add the fluid mesh as a single sub-mesh to the \c Problem and build
the global mesh (see the comment in \ref class .)

\until build_global

We complete the build of the elements by specifying
the Reynolds number and the constitutive equation for the pseudo-solid
equations. 

\until }

Finally, we impose a Poiseuille profile at the inflow boundary (boundary
1) and assign the equation numbers.

\until end_of_constructor


<HR>
<HR>

\section doc Post-processing

The post-processing routine outputs the flow field.

\until }


<HR>
<HR>

\section comm_ex Comments and Exercises



<HR> 
 

\subsection split Split.... hierher
bla
 
\subsection finer_mesh finer mesh and more appropriate outlet
conditions

Add straight outlet tubes or refine or use Lagrange multipliers.

\subsection reynolds What is the Reynolds number?
 
The problem considered here is primarily a toy-problem, devised
to illustrate the use of unstructured meshes for fluids problems.
The specific non-dimensionalisation and parameter values are therefore
of secondary importance. However, since \c oomph-lib's implementation
of the Navier-Stokes equations is based on their non-dimensional form
it is important to clarify the meaning of the Reynolds number 
in the present problem. 

<a href="../../driven_cavity/html/index.html#equation">Recall</a> 
that the Reynolds number is defined as 
\f[
Re = \frac{\rho {\cal U} {\cal L}}{\mu}
\f]
where \f$ \rho \f$ and \f$ \mu \f$ are the fluid density and viscosity,
respectively.  \f$ {\cal L} \f$ is the reference length chosen for the
non-dimensionalisation of the coordinates. In the present problem,
where the domain boundaries were simply drawn in 
<A HREF="http://www.xfig.org/">xfig </a>, no specific reference
length was identified, but inspection of the maximum and minimum 
y-coordinates of the inflow boundary in the mesh plot 
shows that the inflow boundary has a (dimensional) length 
of \f$ (4.0875 - 0.1125) {\cal L} = 3.975 {\cal L}. \f$
In the non-dimensional version of the Navier-Stokes equations, all 
velocities are non-dimensionalised with a reference velocity
\f$ {\cal U} \f$. When we applied the inflow boundary conditions,
we chose the (dimensionless) inflow profile such that its 
integral over the inflow boundary yields a value of 1. The velocity 
scale \f$ {\cal U} \f$ may therefore be interpreted as 
the (dimensional) average inflow velocity through the channel, i.e. the
volume flux divided by the width of the channel at its inflow.

<HR>

\subsection bound Identification/assigment of mesh boundaries
We wish to re-iterate the comments made in the 
<a href="../../../solid/unstructured_solid/html/index.html#comm_ex">
corresponding solid mechanics tutorial</a> that the manual 
identification of nodes on domain boundaries is tedious and 
therefore error prone. It pays off to <B>be  as a paranoid 
as possible</B>, by always documenting the domain boundaries and the
applied boundary conditions. 

 Here is the plot of boundary conditions applied in the present
problem. Hollow blue markers indicate (pseudo-)solid boundary conditions
(both displacements are pinned); small red markers identify nodes
where the vertical fluid velocity is pinned; hollow green markers (filling
the space between the blue and red lines markers) identify nodes at
which the horizontal fluid velocity is pinned. 

@I w 0.75\textwidth bcs "Plot of the correct boundary conditions. "

Here is another plot, obtained with the initial version of 
our driver code -- can you spot what's wrong and can you
identify the lines we had to add to the mesh constructor to 
fix the problem? 

@I w 0.75\textwidth bcs_wrong "Plot of the wrong boundary conditions. "



<HR>

\subsection pseudo_elast Pseudo-elasticity

As mentioned above, the elements' pseudo-elasticity plays no useful
role in the present problem, as the domain boundaries remain
at fixed positions and no mesh movement is required. 

- As an exercise, remove all functionality related to the 
  pseudo-elasticity by changing the element type from
  \code
  PseudoSolidNodeUpdateElement<TTaylorHoodElement<2>,TPVDElement<2,3> >
  \endcode
  to
  \code
  TTaylorHoodElement<2>
  \endcode
  Adjust the code as required (e.g. remove mesh's inheritance from the
  \c SolidMesh base class; remove the application of boundary conditions
  for the nodal positions; etc) and confirm that the results
  for the flow field remain unchanged.
  \n\n
- Alternatively, the pseudo-elasticity can can be suppressed by 
  pinning all nodal positions, drastically reducing the number
  of degrees of freedom in the problem without the need to 
  rewrite the rest of the code. (Note that this is also a useful
  test for the development of FSI codes.)
  \n\n
- However, you may wish to retain the pseudo-elastic capabilities
  and convince yourself that the fluid mesh can indeed deform as an elastic
  body, by specifying a (solid mechanics) body force. To do this,
  simply follow the steps used in 
  <a href="../../../solid/unstructured_solid/html/index.html">
  the corresponding solid mechanics problem:</a> Define the body
  force in the namespace \c Global_Physical_Variables
  and pass a (function-)pointer to it 
  to the elements. (N.B. you will have to specify explicitly
  that you're assigning the body force for the (pseudo-)solid
  as the Navier-Stokes equations have their own body force
  pointer! The compiler will complain about ambiguities if you
  write
  \n
  \code
  [...]

   //Set the body force
   el_pt->body_force_fct_pt() = Global_Physical_Variables::gravity;

  [...]  
  \endcode
  You'll have to be more specific by writing
  \n
  \code
  [...]

   //Set the body force
   el_pt->PVDEquationsBase<2>::body_force_fct_pt() = 
    Global_Physical_Variables::gravity;
  
  [...]   
  \endcode
  instead, indicating that you wish to assign the body force defined in the
  2D solid mechanics equations.
.

<HR>
<HR>

\section sources Source files for this tutorial
- The source files for this tutorial are located in the directory:\n\n
<CENTER>
<A HREF="../../../../demo_drivers/navier_stokes/unstructured_three_d_fluid/">
demo_drivers/navier_stokes/unstructured_three_d_fluid/
</A>
</CENTER>\n
- The driver code is: \n\n
<CENTER>
<A HREF="../../../../demo_drivers/navier_stokes/unstructured_three_d_fluid/unstructured_three_d_fluid.cc">
demo_drivers/navier_stokes/unstructured_three_d_fluid/unstructured_three_d_fluid.cc
</A>
</CENTER>
.











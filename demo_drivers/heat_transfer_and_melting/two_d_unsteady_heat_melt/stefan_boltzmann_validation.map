params:=[S0=0.1,S1=1.0,Beta0=0.05,Beta1=1.5,sigma=0.01,theta0=1.0,r0=0.5,r1=1,r2=1.5,U2=1];


#------------------------------------------------------------
# Solution in inner region with given boundary temperature U0
#------------------------------------------------------------
ode0:=Beta0*(diff(u0(r),r$2)+1/r*diff(u0(r),r))-S0;
u0_test(r):=S0/(4*Beta0)*(r^2-r0^2)+U0;
test:=eval(subs(u0(r)=u0_test(r),ode0));

#------------------------------------------------------------
# Net influx of energy at boundary of inner region
# Positive slope du/dr>0 means temperature is lower
# inside so flux of heat goes INTO the inner region
#------------------------------------------------------------
influx0:=subs(r=r0,Beta0*diff(u0_test(r),r));

#------------------------------------------------------------
# Influx generated by difference between positive 
# radiation from outer region (view factor 1)
# and radiation away from heated inner surface
#------------------------------------------------------------
flux_eqn0:=sigma*((theta0+U1)^4-(theta0+U0)^4)-influx0; 


U1_read_off:=0.9235;
U0_computed_from_observed_U1:=fsolve(subs(U1=U1_read_off,params,flux_eqn0)=0,U0);


#---------------------------------------------------------------------
# Solution in outer region with given boundary temperatures U1 and U2
#---------------------------------------------------------------------
ode1:=Beta1*(diff(u1(r),r$2)+1/r*diff(u1(r),r))-S1;
soln:=dsolve({ode1,u1(r2)=U2,u1(r1)=U1},u1(r));
assign(soln);


#------------------------------------------------------------
# Net influx of energy at inner boundary of outer region
# Positive slope (du/dr>0 means that there outflux of
# heat from the outer region. 
#------------------------------------------------------------
influx1:=-Beta1*subs(r=r1,diff(u1(r),r));


#--------------------------------------------------------------------
# Influx generated by difference between positive 
# radiation from inner region (view factor r0/r1)
# and radiation away from heated outer surface (view factor 1-r0/r1)
#--------------------------------------------------------------------
flux_eqn1:=sigma*((theta0+U0)^4*r0/r1-(theta0+U1)^4*(1-(r0/r1)))-influx1; 


U0_read_off:=0.8289292803;
U1_computed_from_observed_U0:=solve(subs(U0=U0_read_off,params,flux_eqn1)=0,U1);




full_soln:=fsolve({subs(params,flux_eqn0),subs(params,flux_eqn1)},
                  {U0=U0_read_off,U1=U1_read_off});


full_soln;


with(codegen);
C(u0_test(r));
C(u1(r));

#eqn1:=1-x1^2-x2^2;
#eqn2:=x1^2-x2^2;
#fsolve({eqn1,eqn2},{x1=0.7,x2=0.7});



